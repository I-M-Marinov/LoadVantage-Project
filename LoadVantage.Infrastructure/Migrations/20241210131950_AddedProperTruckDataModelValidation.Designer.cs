// <auto-generated />
using System;
using LoadVantage.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace LoadVantage.Infrastructure.Migrations
{
    [DbContext(typeof(LoadVantageDbContext))]
    [Migration("20241210131950_AddedProperTruckDataModelValidation")]
    partial class AddedProperTruckDataModelValidation
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("LoadVantage.Infrastructure.Data.Models.BaseUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("CompanyName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("The name of the company employing the user");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)")
                        .HasComment("Email of the user");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)")
                        .HasComment("First name of the user");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasComment("Signifies if the user's account is activated or deactivated");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)")
                        .HasComment("Last name of the user");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)")
                        .HasComment("HashedPassword for the user");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)")
                        .HasComment("Phone number for the user");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Position")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("Position of the user");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<Guid?>("UserImageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)")
                        .HasComment("Username of the user");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserImageId");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasDiscriminator<string>("Position").HasValue("BaseUser");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("LoadVantage.Infrastructure.Data.Models.BookedLoad", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Unique identifier for a Booked load");

                    b.Property<DateTime>("BookedDate")
                        .HasColumnType("datetime2")
                        .HasComment("The date and time the load was booked.");

                    b.Property<Guid>("BrokerId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Unique identifier for the Broker");

                    b.Property<Guid>("DispatcherId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Unique identifier for the Dispatcher");

                    b.Property<Guid?>("DriverId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Unique identifier for the Driver");

                    b.Property<Guid>("LoadId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Unique identifier for the load");

                    b.HasKey("Id");

                    b.HasIndex("BrokerId");

                    b.HasIndex("DispatcherId");

                    b.HasIndex("DriverId");

                    b.HasIndex("LoadId")
                        .IsUnique();

                    b.ToTable("BookedLoads");
                });

            modelBuilder.Entity("LoadVantage.Infrastructure.Data.Models.ChatMessage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Unique identifier for a chat message");

                    b.Property<bool>("IsRead")
                        .HasColumnType("bit")
                        .HasComment("Signifies if a message has been viewed or not.");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)")
                        .HasComment("String content sent between a Sender and a Receiver");

                    b.Property<Guid>("ReceiverId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Unique identifier for a Receiver");

                    b.Property<Guid>("SenderId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Unique identifier for a Sender");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime2")
                        .HasComment("Time and date of the message sent");

                    b.HasKey("Id");

                    b.HasIndex("ReceiverId");

                    b.HasIndex("SenderId");

                    b.ToTable("ChatMessages");
                });

            modelBuilder.Entity("LoadVantage.Infrastructure.Data.Models.DeliveredLoad", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Unique identifier for a Delivered Load");

                    b.Property<Guid?>("BookedLoadId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Unique identifier for the Booked Load");

                    b.Property<Guid>("BrokerId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Unique identifier for the Broker");

                    b.Property<DateTime>("DeliveredDate")
                        .HasColumnType("datetime2")
                        .HasComment("The date and time the load was delivered.");

                    b.Property<Guid>("DispatcherId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Unique identifier for the Dispatcher");

                    b.Property<Guid>("DriverId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Unique identifier for the Driver");

                    b.Property<Guid>("LoadId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Unique identifier for the Load");

                    b.HasKey("Id");

                    b.HasIndex("BookedLoadId");

                    b.HasIndex("BrokerId");

                    b.HasIndex("DispatcherId");

                    b.HasIndex("DriverId");

                    b.HasIndex("LoadId")
                        .IsUnique();

                    b.ToTable("DeliveredLoads");
                });

            modelBuilder.Entity("LoadVantage.Infrastructure.Data.Models.Driver", b =>
                {
                    b.Property<Guid>("DriverId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Unique identifier for a Driver");

                    b.Property<Guid?>("DispatcherId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Unique identifier for the Dispatcher");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)")
                        .HasComment("First Name of the Driver");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("bit")
                        .HasComment("Signifies if a driver is available to be assigned to a truck.");

                    b.Property<bool>("IsBusy")
                        .HasColumnType("bit")
                        .HasComment("Signifies if a driver is currently on a job or not.");

                    b.Property<bool>("IsFired")
                        .HasColumnType("bit")
                        .HasComment("Signifies if a driver is fired or not.");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)")
                        .HasComment("Last Name of the Driver");

                    b.Property<string>("LicenseNumber")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)")
                        .HasComment("License Number of the Driver");

                    b.Property<Guid?>("TruckId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Unique identifier for the Truck");

                    b.HasKey("DriverId");

                    b.HasIndex("DispatcherId");

                    b.HasIndex("TruckId")
                        .IsUnique()
                        .HasFilter("[TruckId] IS NOT NULL");

                    b.ToTable("Drivers");
                });

            modelBuilder.Entity("LoadVantage.Infrastructure.Data.Models.Load", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Unique identifier for a Load");

                    b.Property<Guid>("BrokerId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Unique identifier for the Broker");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2")
                        .HasComment("Date and Time the load was created.");

                    b.Property<DateTime>("DeliveryTime")
                        .HasColumnType("datetime2")
                        .HasComment("Date and Time when the load needs to be delivered at");

                    b.Property<string>("DestinationCity")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasComment("The city the load is consigned to");

                    b.Property<string>("DestinationState")
                        .IsRequired()
                        .HasMaxLength(2)
                        .HasColumnType("nvarchar(2)")
                        .HasComment("The state the load is consigned to");

                    b.Property<double?>("Distance")
                        .HasColumnType("float")
                        .HasComment("Distance in miles between the Origin and Destinations city and state");

                    b.Property<string>("OriginCity")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasComment("The city the load is originating from");

                    b.Property<string>("OriginState")
                        .IsRequired()
                        .HasMaxLength(2)
                        .HasColumnType("nvarchar(2)")
                        .HasComment("The state the load is originating from");

                    b.Property<DateTime>("PickupTime")
                        .HasColumnType("datetime2")
                        .HasComment("Date and Time when the load needs to be picked up");

                    b.Property<decimal>("Price")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)")
                        .HasComment("Decimal amount paid for moving the load from origin to the destination.");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasComment("Status of the load");

                    b.Property<double>("Weight")
                        .HasColumnType("float")
                        .HasComment("Weight of the load in lbs");

                    b.HasKey("Id");

                    b.HasIndex("BrokerId");

                    b.ToTable("Loads");
                });

            modelBuilder.Entity("LoadVantage.Infrastructure.Data.Models.PostedLoad", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Unique identifier for a Posted Load");

                    b.Property<Guid>("LoadId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Unique identifier for the Load");

                    b.Property<DateTime?>("PostedDate")
                        .HasColumnType("datetime2")
                        .HasComment("Date and Time when the load was Posted");

                    b.HasKey("Id");

                    b.HasIndex("LoadId")
                        .IsUnique();

                    b.ToTable("PostedLoads");
                });

            modelBuilder.Entity("LoadVantage.Infrastructure.Data.Models.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("LoadVantage.Infrastructure.Data.Models.Truck", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Unique identifier for a truck");

                    b.Property<Guid>("DispatcherId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Unique identifier for the Dispatcher");

                    b.Property<Guid?>("DriverId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Unique identifier for the Driver");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasComment("Signifies if the truck is active or decommissioned.");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("bit")
                        .HasComment("Signifies if the truck is ready to go on the road.");

                    b.Property<string>("Make")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasComment("Truck Make");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Truck Model");

                    b.Property<string>("TruckNumber")
                        .IsRequired()
                        .HasMaxLength(7)
                        .HasColumnType("nvarchar(7)")
                        .HasComment("Additional reference number for a truck, usually inside the company it is used in.");

                    b.Property<int>("Year")
                        .HasColumnType("int")
                        .HasComment("Truck Production Year");

                    b.HasKey("Id");

                    b.HasIndex("DispatcherId");

                    b.ToTable("Trucks");
                });

            modelBuilder.Entity("LoadVantage.Infrastructure.Data.Models.UserImage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Unique identifier for the User Image");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasComment("Url address pointing to the User Image");

                    b.Property<string>("PublicId")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasComment("Key used in Cloudinary to determine validity of the User Image");

                    b.HasKey("Id");

                    b.ToTable("UsersImages");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("BaseUserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("BaseUserId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("LoadVantage.Infrastructure.Data.Models.Administrator", b =>
                {
                    b.HasBaseType("LoadVantage.Infrastructure.Data.Models.BaseUser");

                    b.HasDiscriminator().HasValue("Administrator");
                });

            modelBuilder.Entity("LoadVantage.Infrastructure.Data.Models.User", b =>
                {
                    b.HasBaseType("LoadVantage.Infrastructure.Data.Models.BaseUser");

                    b.HasDiscriminator().HasValue("User");
                });

            modelBuilder.Entity("LoadVantage.Infrastructure.Data.Models.Broker", b =>
                {
                    b.HasBaseType("LoadVantage.Infrastructure.Data.Models.User");

                    b.HasDiscriminator().HasValue("Broker");
                });

            modelBuilder.Entity("LoadVantage.Infrastructure.Data.Models.Dispatcher", b =>
                {
                    b.HasBaseType("LoadVantage.Infrastructure.Data.Models.User");

                    b.HasDiscriminator().HasValue("Dispatcher");
                });

            modelBuilder.Entity("LoadVantage.Infrastructure.Data.Models.BaseUser", b =>
                {
                    b.HasOne("LoadVantage.Infrastructure.Data.Models.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LoadVantage.Infrastructure.Data.Models.UserImage", "UserImage")
                        .WithMany("Users")
                        .HasForeignKey("UserImageId");

                    b.Navigation("Role");

                    b.Navigation("UserImage");
                });

            modelBuilder.Entity("LoadVantage.Infrastructure.Data.Models.BookedLoad", b =>
                {
                    b.HasOne("LoadVantage.Infrastructure.Data.Models.Broker", "Broker")
                        .WithMany()
                        .HasForeignKey("BrokerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LoadVantage.Infrastructure.Data.Models.Dispatcher", "Dispatcher")
                        .WithMany()
                        .HasForeignKey("DispatcherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LoadVantage.Infrastructure.Data.Models.Driver", "Driver")
                        .WithMany()
                        .HasForeignKey("DriverId");

                    b.HasOne("LoadVantage.Infrastructure.Data.Models.Load", "Load")
                        .WithOne("BookedLoad")
                        .HasForeignKey("LoadVantage.Infrastructure.Data.Models.BookedLoad", "LoadId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Broker");

                    b.Navigation("Dispatcher");

                    b.Navigation("Driver");

                    b.Navigation("Load");
                });

            modelBuilder.Entity("LoadVantage.Infrastructure.Data.Models.ChatMessage", b =>
                {
                    b.HasOne("LoadVantage.Infrastructure.Data.Models.BaseUser", "Receiver")
                        .WithMany("ReceivedMessages")
                        .HasForeignKey("ReceiverId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("LoadVantage.Infrastructure.Data.Models.BaseUser", "Sender")
                        .WithMany("SentMessages")
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Receiver");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("LoadVantage.Infrastructure.Data.Models.DeliveredLoad", b =>
                {
                    b.HasOne("LoadVantage.Infrastructure.Data.Models.BookedLoad", "BookedLoad")
                        .WithMany()
                        .HasForeignKey("BookedLoadId");

                    b.HasOne("LoadVantage.Infrastructure.Data.Models.Broker", "Broker")
                        .WithMany()
                        .HasForeignKey("BrokerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LoadVantage.Infrastructure.Data.Models.Dispatcher", "Dispatcher")
                        .WithMany()
                        .HasForeignKey("DispatcherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LoadVantage.Infrastructure.Data.Models.Driver", "Driver")
                        .WithMany()
                        .HasForeignKey("DriverId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LoadVantage.Infrastructure.Data.Models.Load", "Load")
                        .WithOne("DeliveredLoad")
                        .HasForeignKey("LoadVantage.Infrastructure.Data.Models.DeliveredLoad", "LoadId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BookedLoad");

                    b.Navigation("Broker");

                    b.Navigation("Dispatcher");

                    b.Navigation("Driver");

                    b.Navigation("Load");
                });

            modelBuilder.Entity("LoadVantage.Infrastructure.Data.Models.Driver", b =>
                {
                    b.HasOne("LoadVantage.Infrastructure.Data.Models.Dispatcher", "Dispatcher")
                        .WithMany("Drivers")
                        .HasForeignKey("DispatcherId");

                    b.HasOne("LoadVantage.Infrastructure.Data.Models.Truck", "Truck")
                        .WithOne("Driver")
                        .HasForeignKey("LoadVantage.Infrastructure.Data.Models.Driver", "TruckId");

                    b.Navigation("Dispatcher");

                    b.Navigation("Truck");
                });

            modelBuilder.Entity("LoadVantage.Infrastructure.Data.Models.Load", b =>
                {
                    b.HasOne("LoadVantage.Infrastructure.Data.Models.Broker", "Broker")
                        .WithMany("Loads")
                        .HasForeignKey("BrokerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Broker");
                });

            modelBuilder.Entity("LoadVantage.Infrastructure.Data.Models.PostedLoad", b =>
                {
                    b.HasOne("LoadVantage.Infrastructure.Data.Models.Load", "Load")
                        .WithOne("PostedLoad")
                        .HasForeignKey("LoadVantage.Infrastructure.Data.Models.PostedLoad", "LoadId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Load");
                });

            modelBuilder.Entity("LoadVantage.Infrastructure.Data.Models.Truck", b =>
                {
                    b.HasOne("LoadVantage.Infrastructure.Data.Models.Dispatcher", "Dispatcher")
                        .WithMany("Trucks")
                        .HasForeignKey("DispatcherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Dispatcher");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("LoadVantage.Infrastructure.Data.Models.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("LoadVantage.Infrastructure.Data.Models.BaseUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("LoadVantage.Infrastructure.Data.Models.BaseUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("LoadVantage.Infrastructure.Data.Models.BaseUser", null)
                        .WithMany("UserRoles")
                        .HasForeignKey("BaseUserId");

                    b.HasOne("LoadVantage.Infrastructure.Data.Models.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LoadVantage.Infrastructure.Data.Models.BaseUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("LoadVantage.Infrastructure.Data.Models.BaseUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LoadVantage.Infrastructure.Data.Models.BaseUser", b =>
                {
                    b.Navigation("ReceivedMessages");

                    b.Navigation("SentMessages");

                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("LoadVantage.Infrastructure.Data.Models.Load", b =>
                {
                    b.Navigation("BookedLoad");

                    b.Navigation("DeliveredLoad");

                    b.Navigation("PostedLoad");
                });

            modelBuilder.Entity("LoadVantage.Infrastructure.Data.Models.Truck", b =>
                {
                    b.Navigation("Driver");
                });

            modelBuilder.Entity("LoadVantage.Infrastructure.Data.Models.UserImage", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("LoadVantage.Infrastructure.Data.Models.Broker", b =>
                {
                    b.Navigation("Loads");
                });

            modelBuilder.Entity("LoadVantage.Infrastructure.Data.Models.Dispatcher", b =>
                {
                    b.Navigation("Drivers");

                    b.Navigation("Trucks");
                });
#pragma warning restore 612, 618
        }
    }
}
