@using LoadVantage.Extensions
@using LoadVantage.Infrastructure.Data
@using LoadVantage.Infrastructure.Data.Models
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.Mvc.TagHelpers
@using static LoadVantage.Common.GeneralConstants.UserImage;
@inject UserManager<User> UserManager
@inject LoadVantageDbContext DbContext

@model LoadVantage.Core.Models.Profile.ProfileViewModel

@{
	var user = await User.GetUserAsync(UserManager);
	var userImageUrl = DbContext.UsersImages.First(ui => ui.User == user).ImageUrl;

  if (userImageUrl == null)
  {
	  userImageUrl = DefaultImagePath;
  }

}

<header id="header" class="header fixed-top d-flex align-items-center">

	<div class="d-flex align-items-center justify-content-between">
		<a asp-controller="Profile" asp-action="Profile" class="logo d-flex align-items-center">
			<img src="~/assets/img/loadVantage.svg" alt="LoadVantage Logo">
			
			<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100">
				<path d="M50,0 L100,100 H0 Z" fill="transparent" />
			</svg>

		</a>
		<i class="bi bi-list toggle-sidebar-btn"></i>
	</div><!-- End Logo -->

	<div class="search-bar">
		<form class="search-form d-flex align-items-center" method="POST" action="#">
			<input type="text" name="query" placeholder="Search" title="Enter search keyword">
			<button type="submit" title="Search"><i class="bi bi-search"></i></button>
		</form>
	</div><!-- End Search Bar -->

	<nav class="header-nav ms-auto">
		<ul class="d-flex align-items-center">

			<li class="nav-item d-block d-lg-none">
				<a class="nav-link nav-icon search-bar-toggle " href="#">
					<i class="bi bi-search"></i>
				</a>
			</li><!-- End Search Icon-->
				
			<div class="container">
					<label for="dark-mode-toggle" class="toggle">
					<input type="checkbox" class="input" id="dark-mode-toggle" />
					<div class="icon icon--moon">
						<svg
							xmlns="http://www.w3.org/2000/svg"
							viewBox="0 0 24 24"
							fill="currentColor"
							width="17"
							height="17"
						>
							<path
								fill-rule="evenodd"
								d="M9.528 1.718a.75.75 0 01.162.819A8.97 8.97 0 009 6a9 9 0 009 9 8.97 8.97 0 003.463-.69.75.75 0 01.981.98 10.503 10.503 0 01-9.694 6.46c-5.799 0-10.5-4.701-10.5-10.5 0-4.368 2.667-8.112 6.46-9.694a.75.75 0 01.818.162z"
								clip-rule="evenodd"
							></path>
						</svg>
					</div>

					<div class="icon icon--sun">
						<svg
							xmlns="http://www.w3.org/2000/svg"
							viewBox="0 0 24 24"
							fill="currentColor"
							width="17"
							height="17"
						>
							<path
								d="M12 2.25a.75.75 0 01.75.75v2.25a.75.75 0 01-1.5 0V3a.75.75 0 01.75-.75zM7.5 12a4.5 4.5 0 119 0 4.5 4.5 0 01-9 0zM18.894 6.166a.75.75 0 00-1.06-1.06l-1.591 1.59a.75.75 0 101.06 1.061l1.591-1.59zM21.75 12a.75.75 0 01-.75.75h-2.25a.75.75 0 010-1.5H21a.75.75 0 01.75.75zM17.834 18.894a.75.75 0 001.06-1.06l-1.59-1.591a.75.75 0 10-1.061 1.06l1.59 1.591zM12 18a.75.75 0 01.75.75V21a.75.75 0 01-1.5 0v-2.25A.75.75 0 0112 18zM7.758 17.303a.75.75 0 00-1.061-1.06l-1.591 1.59a.75.75 0 001.06 1.061l1.591-1.59zM6 12a.75.75 0 01-.75.75H3a.75.75 0 010-1.5h2.25A.75.75 0 016 12zM6.697 7.757a.75.75 0 001.06-1.06l-1.59-1.591a.75.75 0 00-1.061 1.06l1.59 1.591z"
							></path>
						</svg>
					</div>
				</label>
			</div> <!-- End Toggle Dark Theme -->


			<li class="nav-item dropdown">

				<a class="nav-link nav-icon" href="#" data-bs-toggle="dropdown">
					<i class="bi bi-bell"></i>
					<span class="badge bg-primary badge-number">4</span>
				</a><!-- End Notification Icon -->

				<ul class="dropdown-menu dropdown-menu-end dropdown-menu-arrow notifications">
					<li class="dropdown-header">
						You have 4 new notifications
						<a href="#"><span class="badge rounded-pill bg-primary p-2 ms-2">View all</span></a>
					</li>
					<li>
						<hr class="dropdown-divider">
					</li>

					<li class="notification-item">
						<i class="bi bi-exclamation-circle text-warning"></i>
						<div>
							<h4>Lorem Ipsum</h4>
							<p>Quae dolorem earum veritatis oditseno</p>
							<p>30 min. ago</p>
						</div>
					</li>

					<li>
						<hr class="dropdown-divider">
					</li>

					<li class="notification-item">
						<i class="bi bi-x-circle text-danger"></i>
						<div>
							<h4>Atque rerum nesciunt</h4>
							<p>Quae dolorem earum veritatis oditseno</p>
							<p>1 hr. ago</p>
						</div>
					</li>

					<li>
						<hr class="dropdown-divider">
					</li>

					<li class="notification-item">
						<i class="bi bi-check-circle text-success"></i>
						<div>
							<h4>Sit rerum fuga</h4>
							<p>Quae dolorem earum veritatis oditseno</p>
							<p>2 hrs. ago</p>
						</div>
					</li>

					<li>
						<hr class="dropdown-divider">
					</li>

					<li class="notification-item">
						<i class="bi bi-info-circle text-primary"></i>
						<div>
							<h4>Dicta reprehenderit</h4>
							<p>Quae dolorem earum veritatis oditseno</p>
							<p>4 hrs. ago</p>
						</div>
					</li>

					<li>
						<hr class="dropdown-divider">
					</li>
					<li class="dropdown-footer">
						<a href="#">Show all notifications</a>
					</li>

				</ul><!-- End Notification Dropdown Items -->

			</li><!-- End Notification Nav -->

			<li class="nav-item dropdown">
				<a class="nav-link nav-icon" href="#" data-bs-toggle="dropdown">
					<i class="bi bi-chat-left-text"></i>
					<span id="loadNotificationCount" class="badge bg-success badge-number"></span>
				</a><!-- End Messages Icon -->

				<ul class="dropdown-menu dropdown-menu-end dropdown-menu-arrow messages" id="loadNotificationList">
					<li class="dropdown-header">
						<input type="hidden" id="userId" value="@user.Id.ToString()"/>
						You have <span id="notificationCount">0</span> new notifications
						<a href="#"><span class="badge rounded-pill bg-primary p-2 ms-2">View all</span></a>
					</li>
					<li>
						<hr class="dropdown-divider">
					</li>

				</ul><!-- End Messages Dropdown Items -->
			</li><!-- End Messages Nav -->


			<li class="nav-item dropdown pe-3">

				<a class="nav-link nav-profile d-flex align-items-center pe-0" href="#" data-bs-toggle="dropdown">
					<img src=@userImageUrl alt="User Image" class="rounded-circle">
					<span class="d-none d-md-block dropdown-toggle ps-2">@user!.FirstName[0].@user.LastName</span>
				</a><!-- End Profile Iamge Icon -->
				<ul class="dropdown-menu dropdown-menu-end dropdown-menu-arrow profile">

					<li class="dropdown-header">
						<h6>@user.FullName</h6>
						<span>@user.Position</span>
					</li>
					<li>
						<hr class="dropdown-divider">
					</li>

					<li>

						<form method="get" action="@Url.Action("Profile", "Profile")">
							<input type="hidden" name="userId" value="@user.Id"/>
							<button type="submit" class="dropdown-item d-flex align-items-center">
								<i class="bi bi-person"></i>
								<span>My Profile</span>
							</button>
						</form>
					</li>
					<li>
						<hr class="dropdown-divider">
					</li>

					<li>
						<a class="dropdown-item d-flex align-items-center" href="users-profile.html">
							<i class="bi bi-gear"></i>
							<span>Account Settings</span>
						</a>
					</li>
					<li>
						<hr class="dropdown-divider">
					</li>

					<li>
						<form method="get" action="@Url.Action("Privacy", "Home")">
							<button type="submit" class="dropdown-item d-flex align-items-center">
								<i class="ri  ri-question-fill"></i>
								<span>Privacy Policy</span>
							</button>
						</form>
					</li>
					<li>
						<hr class="dropdown-divider">
					</li>

					<li>
						<form method="get" action="@Url.Action("Logout", "Account")">
							<input type="hidden" name="brokerId" value="@user.Id"/>
							<button type="submit" class="dropdown-item d-flex align-items-center">
								<i class="bi bi-box-arrow-right"></i>
								<span>Sign Out</span>
							</button>
						</form>
					</li>

				</ul><!-- End Profile Dropdown Items -->
			</li><!-- End Profile Nav -->

		</ul>
	</nav><!-- End Icons Navigation -->

</header><!-- End Header -->

@* <script>


    let messageConnection = null;

    function initializeMessageNotifications() {
        // Establish SignalR connection
        if (!messageConnection) {
            messageConnection = new signalR.HubConnectionBuilder()
                .withUrl("/chatHub")
                .configureLogging(signalR.LogLevel.Information)
                .build();

            messageConnection.start()
                .then(() => {
                    console.log("Connected to ChatHub.");
                })
                .catch(err => {
                    console.error("Error connecting to ChatHub:", err.toString());
                });

            // Handle received messages
            messageConnection.on("ReceiveMessage", function (message) {
                console.log("Received message: ", message);
                appendMessageToChat(message);
            });

            // Handle received notifications
            messageConnection.on("ReceiveNotification", function (notification) {
                console.log("Received notification: ", notification);
                displayNotification(notification);
            });

            // Handle disconnection
            messageConnection.onclose(async () => {
                console.log("Disconnected from ChatHub. Attempting to reconnect...");
                try {
                    await messageConnection.start();
                    console.log("Reconnected to ChatHub.");
                } catch (err) {
                    console.error("Reconnection failed:", err.toString());
                }
            });
        }
    }

    // Append a new message to the chat
    function appendMessageToChat(message) {
        const chatMessages = document.getElementById("chat-messages");
        const messageElement = document.createElement("div");
        messageElement.classList.add("message-item");
        messageElement.textContent = `You: ${message}`;
        chatMessages.appendChild(messageElement);
        chatMessages.scrollTop = chatMessages.scrollHeight;
    }

    // Display a notification (customize as needed)
    function displayNotification(notification) {
        // Find the dropdown list where the notifications are added
        const notificationList = document.getElementById("loadNotificationList");

        // Create a new list item for the notification
        const newNotification = document.createElement("li");
        newNotification.classList.add("notification-item");
        newNotification.textContent = notification;  // Customize this if needed

        // Insert the new notification item before the footer
        notificationList.insertBefore(newNotification, notificationList.querySelector(".dropdown-footer"));

        // Optionally, update the notification count in the header
        const notificationCountElement = document.getElementById("notificationCount");
        notificationCountElement.textContent = parseInt(notificationCountElement.textContent) + 1;
    }

    // Handle the form submission for sending a message
    function handleSendMessage(event) {
        event.preventDefault();

        const messageInput = document.getElementById("message-input");
        const receiverId = document.getElementById("receiverId");
        const message = messageInput.value;

        if (message) {
            // The message is sent by a form submission to the controller action (handled server-side)
            // The controller will then trigger SignalR notification for real-time updates
            document.getElementById("chat-form").submit(); // Submit the form to trigger the controller action
            messageInput.value = ""; // Clear input after sending
        }
    }

    // Attach form submission handler
    window.onload = function () {
        document.getElementById("chat-form").addEventListener("submit", handleSendMessage);
    };

    function reloadChatWindow(receiverId) {
        $.ajax({
            url: '/Chat/GetChatWindow',  // This should match your controller's action
            type: 'GET',
            data: { receiverId: receiverId },
            success: function (data) {
                // Replace the current chat window content with the new content
                $('#chat-window').html(data);
            },
            error: function (error) {
                console.error("Error loading chat window:", error);
            }
        });
    }
	
	// document.addEventListener("DOMContentLoaded", function () {
   // 	initializeMessageNotifications();
   // });

</script>
 *@
 
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>

<script>
	
    // $(document).ready(function () {
    //     updateUnreadCount();

    //     // Optional: Auto-refresh every 30 seconds
    //     setInterval(updateUnreadCount, 10000);
    // });


</script>