@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers
@using LoadVantage.Extensions
@using LoadVantage.Infrastructure.Data.Models
@using Microsoft.AspNetCore.Mvc.TagHelpers
@using LoadVantage.Core.Models.LoadBoard;

@model LoadBoardViewModel

@{
	Layout = "~/Views/Shared/_LoggedInLayout.cshtml";
    ViewData["Title"] = $"{Model.Position} Load Board";

    var tempDataSuccessMessage = TempData.GetSuccessMessage();
    var tempDataErrorMessage = TempData.GetErrorMessage();
    var tempDataActiveTab = TempData.GetActiveTab();

}

<!-- ======= Header ======= -->
@await Html.PartialAsync("_HeaderPartialView", Model.Profile)

<!-- End Header -->
<!-- ======= Sidebar ======= -->
@await Html.PartialAsync("_SidebarPartialView", Model.Profile)

<main id="main" class="main">

	<div class="pagetitle">
		<h1>Load Board</h1>
		<nav>
			<ol class="breadcrumb">
				<li class="breadcrumb-item"><a href="Profile">@Model.Position</a></li>
				<li class="breadcrumb-item active">Load Board</li>
			</ol>
		</nav>
	</div><!-- End Page Title -->
	
	
    <!-- LOAD BOARD START -->
    <section class="section">
        <div class="row">
            <div class="col-lg-12">

                <div class="card">
                    <div class="card-body">
@* 	                    <h5 class="card-title">Load Board</h5>
 *@
	                   
	                    @if (!string.IsNullOrEmpty(tempDataSuccessMessage))
	                    {
		                    <div class="badge badge-danger mt-1 d-flex justify-content-center" id="success-message">@tempDataSuccessMessage</div>
	                    }

	                    @if (!string.IsNullOrEmpty(tempDataErrorMessage))
	                    {
		                    <div class="badge badge-danger mt-1 d-flex justify-content-center" id="error-message">@tempDataErrorMessage</div>
	                    }
						
	                    <ul class="nav nav-pills mb-3" id="pills-tab" role="tablist">
		                    @if (Model.Profile.Position == nameof(Broker))
		                    {
			                    <li class="nav-item" role="presentation">
				                    <button class="nav-link active" id="pills-created-tab" data-bs-toggle="pill" data-bs-target="#pills-created" type="button" role="tab" aria-controls="pills-created" aria-selected="true">Created Loads</button>
			                    </li>
		                    }
		                    <li class="nav-item" role="presentation">
			                    <button class="nav-link" id="pills-posted-tab" data-bs-toggle="pill" data-bs-target="#pills-posted" type="button" role="tab" aria-controls="pills-posted" aria-selected="false">Posted Loads</button>
		                    </li>
		                    <li class="nav-item" role="presentation">
			                    <button class="nav-link" id="pills-booked-tab" data-bs-toggle="pill" data-bs-target="#pills-booked" type="button" role="tab" aria-controls="pills-booked" aria-selected="false">Booked Loads</button>
		                    </li>
		                    <li class="nav-item" role="presentation">
			                    <button class="nav-link" id="pills-billed-tab" data-bs-toggle="pill" data-bs-target="#pills-billed" type="button" role="tab" aria-controls="pills-billed" aria-selected="false">Billed Loads</button>
		                    </li>
	                    </ul>
	                    <div class="tab-content" id="myTabContent">
		                    @if (Model.Profile.Position == nameof(Broker))
		                    {
			                    <div class="tab-pane fade show active" id="pills-created" role="tabpanel" aria-labelledby="pills-created-tab">
									<div class="table-responsive">
					                    <table class="table datatable">
						                    <thead>
						                    <tr>
							                    <th>Origin</th>
							                    <th>State</th>
							                    <th>Destination</th>
							                    <th>State</th>
							                    <th>Pickup Time</th>
							                    <th>Delivery Time</th>
							                    <th>Distance</th>
							                    <th>Price</th>
							                    <th data-bs-toggle="tooltip" data-bs-placement="right" data-bs-original-title="Rate per Mile">RPM</th>
							                    <th class="hidden-th">hidden</th>
						                    </tr>
						                    </thead>
						                    <tbody>
						                    @foreach (var load in Model.CreatedLoads)
						                    {
							                    <tr class="clickable-row">
								                    <td>@load.OriginCity</td>
								                    <td>@load.OriginState</td>
								                    <td>@load.DestinationCity</td>
								                    <td>@load.DestinationState</td>
								                    <td>@load.PickupTime.ToString("dd/MM/yyyy HH:mm")</td>
								                    <td>@load.DeliveryTime.ToString("dd/MM/yyyy HH:mm")</td>
								                    <td>@(load.Distance.HasValue ? Math.Round(load.Distance.Value) : 0)</td>
								                    <td>$@load.PostedPrice</td>
								                    <td title="Price per mile">@($"${(load.PostedPrice / (decimal)load.Distance):F2}")</td>
								                    <td>
									                    <form method="get" action="@Url.Action("LoadDetails", "Load")">
										                    <input type="hidden" name="loadId" value="@load.Id"/>
										                    <button class="btn btn-warning view-button">
											                    <i class="ri-clipboard-line"></i>
											                    <span>View</span>
										                    </button>
									                    </form>
								                    </td>
							                    </tr>
						                    }

						                    </tbody>
					                    </table>
				                    </div>
			                    </div>
		                    }
			                    <div class="tab-pane fade" id="pills-posted" role="tabpanel" aria-labelledby="pills-posted-tab">
									<div class="table-responsive" id="postedLoadsTableContainer">

					                    @await Html.PartialAsync("_PostedLoadsTablePartial", Model.PostedLoads)

				                    </div>
			                    </div>
		                    
		                    <div class="tab-pane fade" id="pills-booked" role="tabpanel" aria-labelledby="pills-booked-tab">
			                    <div class="table-responsive">
				                    <table class="table datatable">
					                    <thead>
					                    <tr>
						                    <th>Origin</th>
						                    <th>State</th>
						                    <th>Destination</th>
						                    <th>State</th>
						                    <th>Pickup Time</th>
						                    <th>Delivery Time</th>
						                    <th>Price</th>
						                    <th>Distance</th>
						                    <th>Driver</th>
						                    <th class="hidden-th">hidden</th>
					                    </tr>
					                    </thead>
					                    <tbody>
					                    @foreach (var load in Model.BookedLoads)
					                    {
						                    <tr>
							                    <td>@load.OriginCity</td>
							                    <td>@load.OriginState</td>
							                    <td>@load.DestinationCity</td>
							                    <td>@load.DestinationState</td>
							                    <td>@load.PickupTime.ToString("dd/MM/yyyy HH:mm")</td>
							                    <td>@load.DeliveryTime.ToString("dd/MM/yyyy HH:mm")</td>
							                    <td>$@load.PostedPrice</td>
							                    <td>@(load.Distance.HasValue ? Math.Round(load.Distance.Value) : 0)</td>
							                    <td>@load.DriverId</td>
							                    <td>
								                    <form method="get" action="@Url.Action("LoadDetails", "Load")">
									                    <input type="hidden" name="loadId" value="@load.Id"/>
									                    <button class="btn btn-warning view-button">
										                    <i class="ri-clipboard-line"></i>
										                    <span>View</span>
									                    </button>
								                    </form>
							                    </td>
						                    </tr>
					                    }

					                    </tbody>
				                    </table>
			                    </div>
		                    </div>
		                    <div class="tab-pane fade" id="pills-billed" role="tabpanel" aria-labelledby="pills-billed-tab">
			                    <div class="table-responsive">
				                    <table class="table datatable">
					                    <thead>
					                    <tr>
						                    <th>Origin</th>
						                    <th>State</th>
						                    <th>Destination</th>
						                    <th>State</th>
						                    <th>Distance</th>
						                    <th>Price</th>
						                    <th>Billed On</th>
					                    </tr>
					                    </thead>
					                    <tbody>
					                    @foreach (var load in Model.BilledLoads)
					                    {
						                    <tr>
							                    <td>@load.OriginCity</td>
							                    <td>@load.OriginState</td>
							                    <td>@load.DestinationCity</td>
							                    <td>@load.DestinationState</td>
							                    <td>@($"${(load.PostedPrice / (decimal)load.Distance):F2}")</td>
							                    <td>@load.BilledAmount</td>
							                    <td>@load.BilledDate</td>
						                    </tr>
					                    }

					                    </tbody>
				                    </table>
			                    </div>
		                    </div>

	                    </div><!-- End Pills Tabs -->

                    </div>
                </div>

            </div>
        </div>
    </section>    <!-- LOAD BOARD START -->
	


</main><!-- End #main -->

<script>
	document.addEventListener('DOMContentLoaded', function () {
		var tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'));
		var tooltipList = tooltipTriggerList.map(function (tooltipTriggerEl) {
			return new bootstrap.Tooltip(tooltipTriggerEl);
		});
	});

	document.addEventListener("DOMContentLoaded", function () {
		var activeTab = "@tempDataActiveTab";

		if (activeTab === "posted") {
			var postedTabButton = document.getElementById("pills-posted-tab");
			if (postedTabButton) {
				new bootstrap.Tab(postedTabButton).show();
			}
		} else if (activeTab === "booked") {
			var bookedTabButton = document.getElementById("pills-booked-tab");
			if (bookedTabButton) {
				new bootstrap.Tab(bookedTabButton).show();
			}
		} else {
			var createdTabButton = document.getElementById("pills-created-tab"); // fallback to created tab
			if (createdTabButton) {
				new bootstrap.Tab(createdTabButton).show();
			}
		}
	});

	
	
	/*-------------------------------------------------------------------------------------
	# SIGNALR WEB SOCKET CONNECTION TO RETRIEVE ANY NEW POSTED LOADS
	--------------------------------------------------------------------------------------*/


	// Declare postedLoadsConnection globally
	var postedLoadsConnection;

	function initializePostedLoadsConnection() {
		if (!postedLoadsConnection) {
			postedLoadsConnection = new signalR.HubConnectionBuilder()
				.withUrl("/loadHub")
				.build();

			postedLoadsConnection.start()
				.then(() => {
					console.log("Connected to LoadHub.");
				})
				.catch(err => {
					console.error("Error connecting to LoadHub: " + err);
				});

			postedLoadsConnection.on("ReceiveLoadPostedNotification", function (loadId) {
				console.log("New load posted with ID: " + loadId);
				reloadPostedLoadsTable();
			});

			postedLoadsConnection.on("ReloadPostedLoadsTable", function () {
				console.log("Reloading the table... multiple loads status change / load's status changed");
				reloadPostedLoadsTable();
			});
		}
	}

	function reloadPostedLoadsTable() {
		$.get("/LoadBoard/GetPostedLoadsTable", function (data) {
			$("#postedLoadsTableContainer").html(data);
		});
	}

	document.addEventListener("DOMContentLoaded", function () {
		initializePostedLoadsConnection();
	});

	window.addEventListener("beforeunload", () => {
		if (postedLoadsConnection && postedLoadsConnection.state === "Connected") {
			postedLoadsConnection.stop();
		}
	});



</script>

