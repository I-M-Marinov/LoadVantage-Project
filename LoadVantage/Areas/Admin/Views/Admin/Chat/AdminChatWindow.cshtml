@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers
@using LoadVantage.Extensions
@using Microsoft.AspNetCore.Mvc.TagHelpers
@using LoadVantage.Areas.Admin.Models.AdminChat;

@model AdminChatViewModel

@{
	ViewData["Title"] = "Chats";
	Layout = "~/Views/Shared/_LoggedInLayout.cshtml";

	var tempDataSuccessMessage = TempData.GetSuccessMessage();
	var tempDataErrorMessage = TempData.GetErrorMessage();
}


<!-- ======= Header ======= -->
@await Html.PartialAsync("~/Areas/Admin/Views/AdminShared/_AdminHeaderPartialView.cshtml", Model.Profile)

<!-- End Header -->
<!-- ======= Sidebar ======= -->
@await Html.PartialAsync("~/Areas/Admin/Views/AdminShared/_AdminSidebarPartialView.cshtml", Model.Profile)

<!-- End Sidebar -->


<main id="main" class="main">

    <div class="pagetitle">
        <h1>Chats</h1>
        
    </div>


    <div class="card chat-card">
	    <div class="card-body justify-content-center">

		    @if (!string.IsNullOrEmpty(tempDataSuccessMessage))
		    {
			    <div class="badge badge-danger mt-1 d-flex justify-content-center" id="success-message">@tempDataSuccessMessage</div>
		    }

		    @if (!string.IsNullOrEmpty(tempDataErrorMessage))
		    {
			    <div class="badge badge-danger mt-1 d-flex justify-content-center" id="error-message">@tempDataErrorMessage</div>
		    }
			
		    <div class="spinner-container">
			    <div id="loader" class="spinner" style="display: none;">
		                    
				    <div></div>
				    <div></div>
				    <div></div>
				    <div></div>
				    <div></div>
				    <div></div>

			    </div>
		    </div>
		    <!-- Chat Layout -->
			@if (ViewData["Message"] == null)
		    {
				<div class="container mt-3">
					<div class="row">
						<!-- Sidebar: List of Chat Users (Left Side) -->
						<div class="col-md-4 col-lg-3">
							<h5>Recent Conversations:</h5>
							<ul class="list-group">
								@foreach (var chatUser in Model.Users)
								{
									<li class="list-group-item @(chatUser.Id == Model.CurrentChatUserId ? "active" : "")" id="chat-user">
										<a asp-area="Admin" asp-action="GetMessages" asp-controller="AdminChat" asp-route-chatUserId="@chatUser.Id"
										   class="chat-user-link d-flex align-items-center">
											<img src="@chatUser.ProfilePictureUrl" class="chat-user-image rounded-circle" style="width: 4em; height: 4em;" />
											<span class="ms-3">@chatUser.FullName</span>
											@if (Model.Messages.Any(m => !m.IsRead && Model.CurrentChatUserId == chatUser.Id))
											{
												<span class="check-messages"><i class="bx bxs-message-rounded-error"></i></span>
											}
										</a>
									</li>
								}
							</ul>
						</div>

						<!-- Chat Messages (Right Side) -->
						<div class="col-md-8 col-lg-9">

							<div class="broker-info card mb-3">
								@await Html.PartialAsync("~/Areas/Admin/Views/Admin/Chat/_ChatUserInfoPartial.cshtml", Model.UserInfo)
							</div>

							<!-- Chat Messages Container -->
							<div id="chat-messages-container" style="max-height: 500px; overflow-y: auto;">
								@await Html.PartialAsync("~/Areas/Admin/Views/Admin/Chat/_ChatMessagesPartialView.cshtml", Model.Messages)
							</div>

							<!-- Message Sending Form -->

							<form id="chatForm" asp-area="Admin" asp-action="SendMessage" asp-controller="AdminChat" method="post" class="mt-3">
								@Html.AntiForgeryToken()
								<input type="hidden" name="receiverId" value="@Model.UserInfo.Id" />
								<input type="hidden" id="senderId" value="@Model.Profile.Id" />
								<div class="input-group">
									<input type="text" name="messageContent" class="form-control" placeholder="Type your message..." required autofocus />
									<button type="submit" class="btn btn-success">Send</button>
								</div>
							</form>

						</div>
					</div>
				</div>
		    }
			else
			{
					<div id="noChatsContainer">
						<h5>@ViewData["Message"]</h5>
						<p>To start a chat with a Broker or Dispatcher please view any Load on the Load Board or go to User Management.</p>

					<div class="button-row">
							
							<form asp-action="ReturnToLoadBoard" asp-controller="LoadBoardManagement" method="post" id="backToLoadBoardButton">
								@Html.AntiForgeryToken()
								<button type="submit" class="btn btn-info">
									<i class="bx bxs-dashboard"></i> LoadBoard
								</button>
							</form>

							<form method="get" asp-area="Admin" asp-controller="UserManagement" asp-action="UserManagement" id="backToUserManagementButton">
								<input type="hidden" name="adminId" value="@Model.Profile.Id" />
								<button type="submit" class="btn btn-info">
									<i class="bx bxs-user"></i>
									<span>User Management</span>
								</button>
							</form>

						</div>


					</div>

			}
		   
	    </div>
    </div>

</main><!-- End #main -->

<!-- SignalR  -->
<script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/6.0.5/signalr.min.js"></script>


<!-- jQuery -->
<script src="~/lib/jquery/dist/jquery.min.js"></script>

<!-- jQuery Validation -->
<script src="~/lib/jquery-validation/dist/jquery.validate.min.js"></script>
<script src="~/lib/jquery-validation-unobtrusive/jquery.validate.unobtrusive.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery-ajax-unobtrusive/3.2.6/jquery.unobtrusive-ajax.min.js"></script>


<script>

	if (document.querySelector('.toggle-sidebar-btn')) {

		document.querySelector('.toggle-sidebar-btn').addEventListener('click', function (e) {

			document.body.classList.toggle('toggle-sidebar');
		});
	}

	const hasChats = document.getElementById("chat-messages-container") !== null;

	if (hasChats) {

		function scrollToBottom() {
			const chatContainer = $("#chat-messages-container")[0];
			chatContainer.scrollTop = chatContainer.scrollHeight;
		}

		$(document).ready(function () {
			scrollToBottom();
		});

		// Clicking on Chat User Link //

		$(document).on("click", ".chat-user-link", function (e) {
			e.preventDefault();

			const url = $(this).attr("href");
			const urlParams = new URLSearchParams(url.split('?')[1]);
			const userId = urlParams.get("chatUserId");
			if (!userId) {
				alert("Invalid chat user ID.");
				return;
			}

			loadUserInfo(userId);
			loadChatMessages(url);

			$("input[name='receiverId']").val(userId);

		});

		// Clicking on Chat User Link //

		// Loading User Info //
		function loadUserInfo(userId) {
			$.get(`/Chat/GetUserInfo?userId=${userId}`, function (data) {
				$(".broker-info").html(data);
			}).fail(function () {
				alert("Error loading user information.");
			});
		}

		// Loading User Info //

		// Loading Chat Messages //

		function loadChatMessages(url) {
			$("#chat-messages-container").load(url, function (response, status, xhr) {
				if (status === "error") {
					alert("Error loading chat messages.");
				} else {
					scrollToBottom();
				}
			});
		}

		// Loading Chat Messages //
	}

	/*-------------------------------------------------------------------------------------
	# SIGNALR CHAT HUB
	--------------------------------------------------------------------------------------*/

	const chatHubConnection = new signalR.HubConnectionBuilder()
		.withUrl("/chatHub")
		.build();

	chatHubConnection.start().then(() => {
		console.log("SignalR ChatHub connection initialized.");

		// Check if the "chat-messages-container" exists
		const messageContainer = document.getElementById("chat-messages-container");
		if (!messageContainer) {
			console.warn("Chat messages container not found. Skipping message handling.");
			return;
		}

		// Handle incoming messages
		chatHubConnection.on("ReceiveMessage", function (chatMessage) {
			displayMessage(chatMessage);
		});

		const chatForm = document.getElementById("chatForm");
		if (chatForm) {
			chatForm.addEventListener("submit", function (event) {
				// No preventDefault() here
				const messageContentInput = document.querySelector("input[name='messageContent']");
				if (!messageContentInput.value.trim()) {
					event.preventDefault(); // Prevent sending empty messages
					console.error("Message content is empty.");
				}
			});
		} else {
			console.warn("Form element not found. Skipping form submission handling.");
		}

		// Mark messages as read when clicked
		messageContainer.addEventListener('click', function (e) {
			const messageElement = e.target.closest('.chat-message');
			if (messageElement && messageElement.classList.contains('received')) {
				const senderId = messageElement.getAttribute('data-sender-id');
				const receiverId = messageElement.getAttribute('data-receiver-id');

				markMessagesAsRead(senderId, receiverId);

				messageElement.classList.add('read');
			}
		});
	}).catch(err => {
		console.error("Error initializing SignalR connection: " + err);
	});

	// Sanitize the message
	function sanitizeMessage(message) {
		const element = document.createElement('div');
		element.innerText = message;
		return element.innerHTML;
	}

	// Display the message
	function displayMessage(chatMessage) {
		const messageContainer = document.getElementById("chat-messages-container");
		if (!messageContainer) {
			console.warn("Message container not found. Cannot display message.");
			return;
		}

		const currentChatReceiverId = document.getElementById("currentChatReceiverId")?.value;

		if (chatMessage.receiverId !== currentChatReceiverId && chatMessage.senderId !== currentChatReceiverId) {
			console.warn("Message does not belong to the active chat. Ignoring.");
			return;
		}

		const messageElement = document.createElement("div");
		messageElement.classList.add("chat-message");

		const senderId = document.getElementById("senderId")?.value;
		if (chatMessage.senderId === senderId) {
			messageElement.classList.add("sent");
			messageElement.setAttribute("data-is-received", "false");
		} else {
			messageElement.classList.add("received");
			messageElement.setAttribute("data-is-received", "true");
		}

		messageElement.setAttribute("data-message-id", chatMessage.id);
		messageElement.setAttribute("data-sender-id", chatMessage.senderId);
		messageElement.setAttribute("data-receiver-id", chatMessage.receiverId);

		const messageContent = document.createElement("div");
		messageContent.classList.add("message-content");
		messageContent.innerHTML = sanitizeMessage(chatMessage.content); // Sanitization

		const messageTimestamp = document.createElement("div");
		messageTimestamp.classList.add("message-timestamp");
		messageTimestamp.innerText = new Date(chatMessage.timestamp).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });

		messageElement.appendChild(messageContent);
		messageElement.appendChild(messageTimestamp);

		if (chatMessage.isRead) {
			messageElement.classList.add("read");
		}

		messageContainer.appendChild(messageElement);

		// Scroll to the bottom of the message container
		messageContainer.scrollTop = messageContainer.scrollHeight;
	}

</script>
